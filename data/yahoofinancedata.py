# -*- coding: utf-8 -*-
"""YahooFinanceData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h7VHAYwHqz_yfuL8uZl3lmXXYh9sgqd8

# Link to CSV File: https://www.dropbox.com/s/ju3fval44resps5/stocks2000toPresent.csv?dl=0

## Pooling S&P Ticker Data from current listings on Wikipedia. The listed companies change over time. For now, we'll take whatever is listed and run it back to 2000. We'll lose a few, but should have enough interesting information to look at - for now.
"""

!pip install pandas_datareader

!pip install yfinance

import pandas as pd
from pandas_datareader import data as pdr
from google.colab import files
import numpy as np
import datetime 
import yfinance as yf
import io

#wiki_source_link = https://en.wikipedia.org/wiki/List_of_S%26P_500_companies 

webpage = pd.read_html('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')

type(webpage)
print(f"the list is {len(webpage)} long")

type(webpage[0])

webpage[0].shape

company_df = webpage[0]
company_df.head(5)

company_df['Symbol'] = company_df['Symbol'].str.replace('.','')

company_df.info()

print(company_df.Symbol.nunique())

## extracting sector firms

comp_energy = company_df[(company_df['GICS Sector'] == 'Energy')]
comp_materials = company_df[(company_df['GICS Sector'] == 'Materials')]
comp_industrials = company_df[(company_df['GICS Sector'] == 'Industrials')]
comp_consumer_discretionary = company_df[(company_df['GICS Sector'] == 'Consumer Discretionary')]
comp_consumer_staples = company_df[(company_df['GICS Sector'] == 'Consumer Staples')]
comp_healthcare = company_df[(company_df['GICS Sector'] == 'Health Care')]
comp_financials = company_df[(company_df['GICS Sector'] == 'Financials')]
comp_information_technology = company_df[(company_df['GICS Sector'] == 'Information Technology')]
comp_communication_services = company_df[(company_df['GICS Sector'] == 'Communication Services')]
comp_utilities = company_df[(company_df['GICS Sector'] == 'Utilities')]
comp_real_estate = company_df[(company_df['GICS Sector'] == 'Real Estate')]

start_date = datetime.datetime(2022,5,1)
print(start_date)

end_date = datetime.datetime.today()

print(end_date)

def df_to_csv(sector):
  stock_price = pd.DataFrame()
  for i in sector.Symbol.unique():
    try:
      df = yf.download(i, start = start_date, end = end_date, interval = "1d", group_by="ticker")
      df['Ticker'] = i
      df['Sector'] = sector['GICS Sector'][sector['Symbol'] == i].values[0]
      df['Company'] = sector['Security'][sector['Symbol'] == i].values[0]
      stock_price = stock_price.append(df)

    except:
      print(df['Symbol'])
  
  return stock_price

def df_to_csv(sector):
  stock_price = pd.DataFrame()
  for i in sector.Symbol.unique():
    try:
      df = yf.download(i, start = start_date, end = end_date, interval = "1d", group_by="ticker")
      df['Ticker'] = i
      df['Sector'] = sector['GICS Sector'][sector['Symbol'] == i].values[0]
      df['Company'] = sector['Security'][sector['Symbol'] == i].values[0]
      stock_price = stock_price.append(df)

    except:
      print(df['Symbol'])
  
  return stock_price

df_to_csv(comp_energy)

a= df_to_csv(comp_energy)
b= df_to_csv(comp_materials)
c= df_to_csv(comp_industrials)
d= df_to_csv(comp_consumer_discretionary)

e= df_to_csv(comp_consumer_staples) #flag lost MO

g= df_to_csv(comp_financials) #flag lost WRB

f= df_to_csv(comp_healthcare)
h= df_to_csv(comp_information_technology)
i= df_to_csv(comp_communication_services)
j= df_to_csv(comp_utilities)
k= df_to_csv(comp_real_estate)

df_big = pd.concat([a,b,c,d,e,f,g,h,i,j,k], ignore_index= False)

df_big.dtypes

df_big['Date'] = df_big['Date'].dt.strftime('%Y-%m-%d')

df_big

df_big.dtypes

# create an empty list
l = []
ind = []

for i in df_big.index:
# create a dictionary with student details
  dataDict = {'date': df_big.at[i, 'Date'],
           'minute': '9:30',
           'open':df_big.at[i, 'Open'],
           'high':df_big.at[i, 'High'],
           'low':df_big.at[i, 'Low'],
           'close':df_big.at[i, 'Close'],
           'volume':df_big.at[i, 'Volume']}

  ind.append(df_big.at[i, 'Symbol'])
 
# append this dictionary to the empty list
  l.append(dataDict)
 
# display list
l

tidy_df = pd.DataFrame()
tidy_df['chart'] = l
tidy_df['ticker'] = ind

tidy_df

#create new DataFrame by combining rows with same id values
df_new = tidy_df.groupby(['ticker'])['chart'].apply(list)

tidylist = tidy_df.ticker.unique()

tidylist.sort()

tidylist

tidiestlist = tidylist.tolist()
tidiestlist

final_df = pd.DataFrame()
final_df['ticker'] = tidiestlist

final_df

complist = list(company_df['Symbol'])

final_df['ticker'] = complist

final_df['chart'] = tidylist

final_df

count = 0
# iterating through the elements of list
for i in tidiestlist:
    final_df.at[count, 'chart'] = df_new[i]
    count += 1

final_df.head()

grouplist = tidy_df.groupby(['ticker'])['chart'].apply(list).groupby('ticker').apply(list).tolist()

grouplist

ticker = df_big['Symbol'].unique()

!pip install yahoo_fin
import yahoo_fin.stock_info as si

pe = []
eps = []
beta = []
dividend = []
earnings = []

# Can get financials on each company, though creates a new dataframe for each company
income_statement = si.get_income_statement("aapl")

# add minute column
marketCap = []
for tick in ticker:
    try:
        marketCap.append(si.get_quote_table(tick)["Market Cap"])
    except:
        print('Error with: ', tick)

dfr = pd.DataFrame()

dfr['Symbol'] = ticker
dfr['marketcap'] = marketCap

dfr

df_big

pivoted = df_big.reset_index().pivot(columns='Date', index='Symbol', values = 'Close')
pivoted.columns.name=None

df_big = df_big.reset_index()

bigjs = df_big.to_json(orient = 'split')

bigjs

pivoted

merged_df = pd.merge(pivoted, dfr, on = "Symbol", how = "inner")

merged = pd.merge(company_df, dfr, on = "Symbol", how = "inner")

x = ['Symbol','Security','GICS Sector']
merged[x]

fd = pd.merge(merged[x], merged_df, on = "Symbol", how = "inner")

fd['minutes'] = minute

fd.head()
fd['company'] = fd['Security']
fd['ticker'] = fd['Symbol']
fd['sector'] = fd['GICS Sector']

fd = fd.drop(['Symbol', 'Security', 'GICS Sector'], axis=1)

y = ['ticker', 'sector', 'marketcap', 'minutes', 'company']
fd[y]

jfd = fd.to_json(orient='split')

jfd

"""# Lost two as shown in the flags. One was in finance and the other was in consumer staples. Something with the API isn't matching up with dates."""

ticker.size

# Illustrating it with a graph

import plotly.graph_objects as go


df = df_big[df_big['Symbol'] == 'META']
fig = go.Figure(data=[go.Candlestick(x=df.index,
                open=df['Open'],
                high=df['High'],
                low=df['Low'],
                close=df['Close'])])

fig.show()

fd.to_csv('M2022.csv', index=True)
files.download('M2022.csv')

REAL_final.to_json('test.json')
files.download('test.json')

# converting it to a csv file


df_big.to_csv('stocks2000toPresent.csv', index=True)
files.download('stocks2000toPresent.csv')

uploaded = files.upload()
json_df = pd.read_json(io.StringIO(uploaded['data.json'].decode('utf-8')))

# feed date, minute, close price to each ticker chart column. It is a list of nested dictionaries. Column name is the key, value is data. Market cap should contain number.
# add open, high, low, and volume keys. 
json_df

final_df
REAL_final = pd.merge(fd[y], final_df, on = "ticker", how = "inner")

REAL_final

d = {'M': '*1000000', 'B': '*1000000000', 'T': '*1000000000000'}

s_convert = REAL_final.marketcap.replace(d, regex=True).map(pd.eval)